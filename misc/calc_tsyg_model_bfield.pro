;+
; :PRO  calc_tsyg_model_bfield 
; 
; To calculate the T04s Tsyganenko model (actually IGRF + T04s) for given times and satellite locations. 
; 
; The 1st argument "orbvn" is a tplot variable containing a time series of satellite location 
; (Xgsm, Ygsm, Zgsm) in Re for which the specified B-field model value is calculated. 
; For example, "tha_state_pos_gsm", "rbspa_emfisis_l3_4sec_gsm_coordinates", and so on. 
; 
; The keyword "parmod" should be given as a tplot variable or an 1-D array. 
; In the former case, parmod should be that generated by get_tsy_param. 
; In the latter case, parmod should be a 10-element array such as,  
;   [ Pdyn, Dst, IMF-By, IMF-Bz, W1, W2, W3, W4, W5, W6 ]. 
; 
; If autocalc_parmod keyword is set, this procedure tries to obtain the OMNI data 
; and calculates the parmod by using the get_tsy_param procedure. 
; 
; :Examples:
; calc_tsyg_model_bfield, 'tha_state_pos_gsm' 
; 
; calc_tsyg_model_bfield, 'rbspa_emfisis_l3_4sec_gsm_coordinates', $
;     parmod=[ 1.0, -20., 0.0, 0.0,   0., 0., 0., 0., 0., 0. ] 
; 
; calc_tsyg_model_bfield, 'the_state_pos_gsm', /autocalc_parmod, parmod=parvn
; 
; calc_tsyg_model_bfield, 'thb_state_pos_gsm', parmod=parvn 
; 
;-

;Some helper routines used only in this procedure are defined below.


pro calc_tsyg_model_bfield, orbvn_re, bfldvn, $
  t96=t96,  $
  parmod=parmod, $
  autocalc_parmod=autocalc_parmod, smoothb=smoothb, $
  period=period 
  
  ;Check the argument(s) given 
  npar = n_params() 
  if npar lt 1 then return 
  if npar ge 1 and strlen( (tnames(orbvn_re) )[0] ) eq 0 then return 
  add_coord_sys, orbvn_re, 'gsm' ;To avoid the error check in tt04s.pro 
  if npar ge 2 and strlen( (tnames(bfldvn) )[0] ) eq 0 then return 
  
  ;Period for reexecuting GEOPACK_RECALC to update the IGRF coeffs. Default is every 1 min. 
  if ~keyword_set(period) then period = 60 
  
  ;Check the model name specified 
  model = 't04s' ;by default 
  ;if ~keyword_set(t96) then model = 't96' ;to be implemented in future 
  list = ['t04s'] 
  idx = where( list eq strlowcase(model), cnt)
  if cnt eq 0 then begin
    dprint, dlevel=2, 'Invalid Tsyg. model is specfied!' 
    return
  endif
  
  ;Re --> km (Caution: the given orbit values are assumed to be in Re!)
  tkm2re, orbvn_re, /km, suffix= '__inkm'
  orbvn = orbvn_re+'__inkm' 
  
  ;The given parmod array is used for the model calculation. 
  if keyword_set(parmod) and ~keyword_set(autocalc_parmod) then begin
    
    if is_string(parmod) then begin ;parmod is given as an already generated tplot variable 
      if strlen(tnames(parmod[0])) eq 0 then begin
        dprint, dlevel=2, 'The tplot variable given by parmod keyword does not exist!'
        return
      endif
      tt04s, orbvn, parmod=parmod, period=period 
      
    endif else begin ;Then it should be a 10-element array 
      
      sz = size( parmod ) 
      if sz[2] ne 4 or sz[1] ne 10 then begin 
        dprint, dlevel=2, 'the parmod given is not an array or has an invalid size/dim!' 
        return
        endif
        
      par = double( parmod )  
      
      tt04s, orbvn, $
        pdyn=par[0], dsti=par[1], yimf=par[2], zimf=par[3], $
        w1=par[4], w2=par[5], w3=par[6], w4=par[7], w5=par[8], w6=par[9], $
        period=period 
      
    endelse
  
  ;The parmod is calculated on the basis of the OMNI data. 
  endif else if keyword_set(autocalc_parmod) then begin
    
    get_timespan, tr0 
    timespan, tr0 + [ -86400.d, +86400.d ] 
    vn_modelpar = tsy_params( model )
    timespan, tr0 
    
    tt04s, orbvn, parmod=model+'_par', period=period 
    parmod = model+'_par' 
    
  ;None of parmod array or autocalc keyword is given. Use the fixed, quiet time values!
  endif else begin
    
    Nsw = 5.0 ;[/cc]
    Vsw = 350. ;[km/s] 
    IMFBy = 0.0 ;[nT]
    IMFBz = 0.0 ;[nT]
    Dst = 0.0 ;[nT]
    Pdyn = Nsw * Vsw^2 * 1.672 * 1e-6  ;[nPa] 
    geopack_getw, Nsw, Vsw, IMFBz, w 
    par = [ Pdyn, Dst, IMFBy, IMFBz, w[0,0], w[0,1], w[0,2], w[0,3], w[0,4], w[0,5] ]
    
    print, 'Used a parameter set for quiet time' 
    print, '   [    Pdyn,      Dst,   IMF-By,   IMF-Bz,    W1,    W2, ...,    W6]:' 
    print, '   '+string( par, format='( 10(F9.2) )' ) 
    
    tt04s, orbvn, $
      pdyn=par[0], dsti=par[1], yimf=par[2], zimf=par[3], $
      w1=par[4], w2=par[5], w3=par[6], w4=par[7], w5=par[8], w6=par[9], $
      period=period 
    
  endelse 
  
  ;The obtained model B-field is smoothed in time if smoothb keyword is set. 
  if keyword_set(smoothb) then begin 
    running_ave_window = double(period)
    tsmooth_in_time, orbvn+'_b'+model, running_ave_window, new=orbvn+'_b'+model
  endif
  
  ;Rename and remove the generated tplot variables 
  store_data, delete=orbvn 
  newnm = strjoin(strsplit( orbvn+'_b'+model, '__inkm', /regex,/extract,/preserve_null ) , '' )
  if strlen(tnames(newnm)) ne 0 then store_data, delete=newnm
  store_data, orbvn + '_b'+model, newname=newnm
  
  ;Some options 
  scnm = ( strsplit( newnm, '_', /ext ) )[0] 
  options, newnm, ytitle=scnm+'_'+model+'_B', ysubtitle='[nT]', labels=['Bx','By','Bz'], labflag=1, $
    colors=[2,4,6] 
  
  
  vn_modelb = newnm
  print, 'Model B-field is stored: ' 
  tplot_names, vn_modelb 
  
  ;Subtraction of the model field from the observed field given as the 2nd argument
  if npar eq 2 then begin
    get_data, vn_modelb, data=dm, dl=dlm, lim=limm 
    get_data, bfldvn, data=dobs, dl=dlo, lim=limo 
    if n_elements(dm.x) eq n_elements(dobs.x) and $
      abs(dm.x[0]-dobs.x[0]) lt 1e-3 and $
      abs(dm.x[n_elements(dm.x)-1]-dobs.x[n_elements(dobs.x)-1]) lt 1e-3 then begin
      
      dif_data, bfldvn, vn_modelb, newname=vn_modelb+'_db', copy_dl=1
    
    endif else begin 
      
      tinterpol_mxn, vn_modelb, bfldvn, newname = vn_modelb 
      
    endelse 
    
  endif 
  
  return
end

